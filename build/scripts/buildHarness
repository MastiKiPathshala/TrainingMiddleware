#! /usr/bin/perl

use strict;
use warnings;
use POSIX qw(strftime);
use Getopt::Long;

# Getoptions initialize
my %options;
my $help;
my $verbose;
my $build_category;
my $build_type;
my $build_how;

GetOptions(\%options,
           "h|help"              => \$help,
           "v|verbose"           => \$verbose,
           "build_category=s"    => \$build_category,
           "build_type=s"        => \$build_type,
           "build_how=s"         => \$build_how,
) or usage();

usage() if($help);

sub usage {
    print "--help\n";
    print "--build_category <Internal|Release|CI|HF|SP|Patch>\n";
    print "--build_type <Debug|Normal>\n";
    print "--build_how <Full|Fast>\n";
    exit(1);
}

if (defined($build_category)) {
   &usage unless(($build_category eq "Internal") or ($build_category eq "Release") or ($build_category eq "CI"));
}

if (defined($build_type)) {
    &usage unless(($build_type eq "Debug") or ($build_type eq "Normal"));
}

if (defined($build_how)) {
    &usage unless(($build_how eq "Full") or ($build_how eq "Fast"));
}

#my $gitRoot  = `git rev-parse --show-toplevel`;
my $gitRoot  = `pwd`;
chomp($gitRoot);
$ENV{'gitRoot'} = $gitRoot;
$ENV{'PREFIX'} = "$gitRoot/thirdparty";
$ENV{'CC'} = "arm-linux-gnueabihf-gcc";
$ENV{'CXX'} = "arm-linux-gnueabihf-g++";
$ENV{'AR'} = "arm-linux-gnueabihf-ar";
$ENV{'RANLIB'} = "arm-linux-gnueabihf-ranlib";
$ENV{'LD'} = "arm-linux-gnueabihf-ld";
#print "GIT ROOT : $gitRoot, Installation dir : $ENV{'PREFIX'}\n";
print "GIT ROOT : $ENV{'gitRoot'}\n";

my $versionTable =  {};

my $versionFile = "$gitRoot/build/scripts/BUILD_VERSION";
print "Version file is $versionFile\n";
open(FH, "$versionFile") or die "Can not open file BUILD_VERSION $!\n";
my @versionFile = <FH>;
close(FH);

foreach my $elem (@versionFile) {
    next if($elem =~ m/^#/g);
    next if($elem =~ m/^\s+$/g);
    my @tempArray = split(/=/, $elem);
    my $name = $tempArray[0];
    my $val  = $tempArray[1];
    chomp($name);
    chomp($val);
    $versionTable->{$name} = $val;
}

# Construct build string
&printError("PRODUCT") unless(defined $versionTable->{PRODUCT});
&printError("BUILD_MAJOR") unless(defined $versionTable->{BUILD_MAJOR});
&printError("BUILD_MINOR") unless(defined $versionTable->{BUILD_MINOR});
&printError("RELEASE") unless(defined $versionTable->{RELEASE});
&printError("BUILD_PATCH") unless(defined $versionTable->{BUILD_PATCH});
&printError("BUILD_HOTFIX") unless(defined $versionTable->{BUILD_HOTFIX});
&printError("BUILD_SERVICEPACK") unless(defined $versionTable->{BUILD_SERVICEPACK});
my $verString = &constructBuildString(\%${versionTable});
&writeReleaseVerToFile("$verString", "$gitRoot");
&buildIotMiddleware("$verString", "$gitRoot");

sub printError {
    my $product = shift;
    print "$product value need to be defined either in BUILD_VERSION or through params \n";
    exit (1);
}

sub constructBuildString {
    my ($custVerHash) = @_;
    my $datestring = strftime "%m%d%Y%H%M%S", localtime;;
    my $versionString = $custVerHash->{PRODUCT} . "\-" .
    $custVerHash->{BUILD_MAJOR} . "\." .
    $custVerHash->{BUILD_MINOR} . "\-" .
    $custVerHash->{RELEASE} . "." .
    #$datestring;
    $custVerHash->{BUILD_PATCH};
    return "$versionString";
}

sub writeReleaseVerToFile {
    my $versionString = shift;
    my $gitRoot = shift;
    chomp($gitRoot);
    my $relFile = "RELEASE_VERSION";
    unlink ($relFile) if(-e "$relFile");
    print "Updating release information onto a file $relFile\n";
    chdir(qq($gitRoot/build/scripts));
    open(my $fh, '>', $relFile) or die "Could not open file $relFile $!.\n";
    print $fh "{\"system_sw_version\":\"$versionString\"}\n";
    close $fh;
    chmod 0755, $relFile or die "Couldn't change the permission to $relFile: $!";
}

sub buildIotMiddleware {
     my $versionString = shift;
     my $gitRoot = shift;
     chomp($gitRoot);
     my $packageName = "$versionString\.tar\.gz";
     my $relPackageName = "$packageName";
     #system("mkdir );
     #if ($?/256) {
     #    print "Build Error\n";
     #    #exit(1);
     #}
     #print "Handling thirdparty Modules\n";
     #print "Changing directory to $gitRoot/thirdparty\n";
     #chdir(qq($gitRoot/thirdparty));
     #system("make");
     print "Handling Zreyas Modules\n"; 
     print "Changing directory to $gitRoot/src\n";
     chdir(qq($gitRoot/src));
     system("mkdir -p $gitRoot/src/lib");
     #print "Handling Node Modules\n";
     #print "Handling C Libraries\n";
     #chdir(qq($gitRoot/src/zreyas_lib));
     #system("make; make install");
     #print "Handling C Modules\n";
     #chdir(qq($gitRoot/src/gpio));
     #system("make; make install");
     #chdir(qq($gitRoot/src/services));
     #system("make; make install");
     #chdir(qq($gitRoot/src/plc));
     #system("make; make install");
     print "Changing directory to $gitRoot/build/scripts\n";
     chdir(qq($gitRoot/build/scripts));
     print "Executing tar command /bin/tar -czf $gitRoot/build/pkg/$packageName --files-from filesForTarball\n";
     system("/bin/tar -czf $gitRoot/build/pkg/$packageName --files-from filesForTarball") ; 
     #print "Signing Zreyas package with Zreyas Gateway Private key";
     chdir(qq($gitRoot/build/pkg));
     #system("sudo mv $gitRoot/build/pkg/$packageName $gitRoot/build/pkg/$relPackageName; sudo openssl dgst -sha256 -sign /etc/ssl/certs/Zreyas_Gateway_Private.pem -out /tmp/$relPackageName.sha256 $gitRoot/build/pkg/$relPackageName; sudo openssl base64 -in /tmp/$relPackageName.sha256 -out $gitRoot/build/pkg/$relPackageName.digest; /bin/tar -cvzf $gitRoot/build/pkg/$relPackageName.signed $relPackageName*; sudo rm -f /tmp/$relPackageName.sha256");
     system("sudo mv $gitRoot/build/pkg/$packageName $gitRoot/build/pkg/$relPackageName; /bin/tar -cvzf $gitRoot/build/pkg/$relPackageName $relPackageName*");
}

