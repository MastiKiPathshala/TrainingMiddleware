#! /usr/bin/perl

#########################################################################
#
# $file: buildEngine
#
# @brief: Build Engine to generate distributable package
#
# @author: Prosenjit Pal
#
# @date: 26 May 2017 Initial Check in
#
# This file is subject to the terms and conditions defined in
# file 'LICENSE.txt', which is part of this source code package.
#
########################################################################

use strict;
use warnings;
use POSIX qw(strftime);
use Getopt::Long;

# Getoptions initialize
my %options;
my $help;
my $verbose;
my $build_category;
my $build_type;
my $build_how;

GetOptions(\%options,
           "h|help"              => \$help,
           "v|verbose"           => \$verbose,
           "build_category=s"    => \$build_category,
           "build_type=s"        => \$build_type,
           "build_how=s"         => \$build_how,
) or usage();

usage() if($help);

sub usage {
    print "--help\n";
    print "--build_category <Internal|Release|CI|HF|SP|Patch>\n";
    print "--build_type <Debug|Normal>\n";
    print "--build_how <Full|Fast>\n";
    exit(1);
}

if (defined($build_category)) {
   &usage unless(($build_category eq "Internal") or ($build_category eq "Release") or ($build_category eq "CI"));
}

if (defined($build_type)) {
    &usage unless(($build_type eq "Debug") or ($build_type eq "Normal"));
}

if (defined($build_how)) {
    &usage unless(($build_how eq "Full") or ($build_how eq "Fast"));
}

#my $gitRoot  = `git rev-parse --show-toplevel`;
my $gitRoot  = `pwd`;
chomp($gitRoot);
$ENV{'gitRoot'} = $gitRoot;

my $versionTable =  {};

my $versionFile = "$gitRoot/build/scripts/BUILD_VERSION";
open(FH, "$versionFile") or die "Can not open file BUILD_VERSION $!\n";
my @versionFile = <FH>;
close(FH);

foreach my $elem (@versionFile) {
    next if($elem =~ m/^#/g);
    next if($elem =~ m/^\s+$/g);
    my @tempArray = split(/=/, $elem);
    my $name = $tempArray[0];
    my $val  = $tempArray[1];
    chomp($name);
    chomp($val);
    $versionTable->{$name} = $val;
}

# Construct build string
&printError("PRODUCT") unless(defined $versionTable->{PRODUCT});
&printError("BUILD_MAJOR") unless(defined $versionTable->{BUILD_MAJOR});
&printError("BUILD_MINOR") unless(defined $versionTable->{BUILD_MINOR});
&printError("RELEASE") unless(defined $versionTable->{RELEASE});
&printError("BUILD_PATCH") unless(defined $versionTable->{BUILD_PATCH});
&printError("BUILD_HOTFIX") unless(defined $versionTable->{BUILD_HOTFIX});
&printError("BUILD_SERVICEPACK") unless(defined $versionTable->{BUILD_SERVICEPACK});
my $verString = &constructBuildString(\%${versionTable});
&writeReleaseVerToFile("$verString", "$gitRoot");
&buildSecurIoTTrainingGateway("$verString", "$gitRoot");

sub printError {
    my $product = shift;
    print "$product value need to be defined either in BUILD_VERSION or through params \n";
    exit (1);
}

sub constructBuildString {
    my ($custVerHash) = @_;
    my $datestring = strftime "%m%d%Y%H%M%S", localtime;;
    if ($custVerHash->{RELEASE} eq "CI") {
        my $versionString = $custVerHash->{PRODUCT} . "\-" .
        $custVerHash->{BUILD_MAJOR} . "\." .
        $custVerHash->{BUILD_MINOR} . "\-" .
        $custVerHash->{RELEASE} . "." .
        $datestring;
        return "$versionString";
    } else {
        my $versionString = $custVerHash->{PRODUCT} . "\-" .
        $custVerHash->{BUILD_MAJOR} . "\." .
        $custVerHash->{BUILD_MINOR} . "\-" .
        $custVerHash->{RELEASE} . "." .
        $custVerHash->{BUILD_PATCH};
        return "$versionString";
    }
}

sub writeReleaseVerToFile {
    my $versionString = shift;
    my $gitRoot = shift;
    chomp($gitRoot);
    my $relFile = "../pkg/RELEASE_VERSION";
    unlink ($relFile) if(-e "$relFile");
    chdir(qq($gitRoot/build/scripts));
    open(my $fh, '>', $relFile) or die "Could not open file $relFile $!.\n";
    print $fh "{\"system_sw_version\":\"$versionString\"}\n";
    print "Build version $versionString written onto file $relFile\n";
    close $fh;
    chmod 0755, $relFile or die "Couldn't change the permission to $relFile: $!";
}

sub buildSecurIoTTrainingGateway {
     my $versionString = shift;
     my $gitRoot = shift;
     chomp($gitRoot);
     my $packageName = "$versionString\.tar\.gz";
     my $relPackageName = "v$packageName";
     chdir(qq($gitRoot));
     print "Changing directory to $gitRoot/build/scripts\n";
     chdir(qq($gitRoot/build/scripts));
     print "Executing tar command /bin/tar -czf $gitRoot/build/pkg/$packageName --files-from pkgList\n";
     system("/bin/tar -czf $gitRoot/build/pkg/$packageName --files-from pkgList") ; 
}

